pipeline {
    agent any

    environment {
        // Choose environment: dev, staging, prod
        APP_ENV = 'dev'
        JAVA_HOME = 'C:\\Program Files\\Eclipse Adoptium\\jdk-17.0.16.8-hotspot'
        MAVEN_HOME = 'C:\\Program Files\\apache-maven-3.9.11'
        PATH = "${env.JAVA_HOME}\\bin;${env.MAVEN_HOME}\\bin;${env.PATH}"
    }

    options {
        skipStagesAfterUnstable()
        timestamps()
    }

    stages {

        stage('Checkout SCM') {
            steps {
                echo "üóÇ Checking out source code"
                checkout scm
            }
        }

        stage('Check Tools') {
            steps {
                echo "üõ† Verifying Java and Maven"
                bat 'java -version'
                bat 'mvn -version'
            }
        }

        stage('Determine Environment') {
            steps {
                echo "Environment set to ${env.APP_ENV}"
            }
        }

        stage('Build & Unit Tests') {
            steps {
                echo "üì¶ Building Spring Boot app with profile: ${env.APP_ENV}"
                dir('springboot-crud-h2') {
                    bat "mvn clean package -P${env.APP_ENV}"
                }
            }
        }

        stage('Approval for Production') {
            when {
                expression { env.APP_ENV == 'prod' }
            }
            steps {
                input message: 'Approve deployment to PRODUCTION?', ok: 'Deploy'
            }
        }

        stage('Deploy & Start App') {
            steps {
                echo "üöÄ Deploying and starting ${env.APP_ENV} app"
                dir('springboot-crud-h2/target') {
                    // Create deployment folder if it does not exist
                    bat "if not exist C:\\Deployments\\${env.APP_ENV} mkdir C:\\Deployments\\${env.APP_ENV}"

                    // Copy jar to deployment folder
                    bat "copy springboot-crud-h2-1.0.0.jar C:\\Deployments\\${env.APP_ENV}\\"

                    // Stop existing app if running (optional)
                    bat """
                        for /f "tokens=5" %%a in ('netstat -ano ^| findstr :8080') do taskkill /PID %%a /F
                    """

                    // Start jar in background with log output
                    bat """
                        start /B cmd /c "java -jar C:\\Deployments\\${env.APP_ENV}\\springboot-crud-h2-1.0.0.jar --spring.profiles.active=${env.APP_ENV} > C:\\Deployments\\${env.APP_ENV}\\springboot-crud-h2.log 2>&1"
                    """
                }
            }
        }

        stage('Monitor Logs') {
            steps {
                echo "üìÑ Monitoring logs for ${env.APP_ENV}"
                // Wait a few seconds for the app to start
                bat "timeout /t 5"

                // Tail last 50 lines of log
                bat """
                    if exist C:\\Deployments\\${env.APP_ENV}\\springboot-crud-h2.log (
                        powershell -Command "Get-Content C:\\Deployments\\${env.APP_ENV}\\springboot-crud-h2.log -Tail 50 -Wait"
                    ) else (
                        echo "Log file does not exist yet. The app may not have started."
                    )
                """
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline finished successfully!"
        }
        failure {
            echo "‚ùå Pipeline failed! Check logs above."
        }
    }
}
