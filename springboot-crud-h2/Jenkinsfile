pipeline {
    agent any

    environment {
        // Choose environment: dev, staging, prod
        APP_ENV = 'dev'
        JAVA_HOME = 'C:\\Program Files\\Eclipse Adoptium\\jdk-17.0.16.8-hotspot'
        MAVEN_HOME = 'C:\\Program Files\\apache-maven-3.9.11'
        PATH = "${env.JAVA_HOME}\\bin;${env.MAVEN_HOME}\\bin;${env.PATH}"
    }

    options {
        skipStagesAfterUnstable()
        timestamps()
    }

    stages {

        stage('Checkout SCM') {
            steps {
                echo "üóÇ Checking out source code"
                checkout scm
            }
        }

        stage('Check Tools') {
            steps {
                echo "üõ† Verifying Java and Maven"
                bat 'java -version'
                bat 'mvn -version'
            }
        }

        stage('Determine Environment') {
            steps {
                script {
                    echo "Environment set to ${env.APP_ENV}"
                }
            }
        }

        stage('Build & Unit Tests') {
            steps {
                echo "üì¶ Building Spring Boot app with profile: ${env.APP_ENV}"
                dir('springboot-crud-h2') {
                    bat "mvn clean package -P${env.APP_ENV}"
                }
            }
        }

        stage('Approval for Production') {
            when {
                expression { env.APP_ENV == 'prod' }
            }
            steps {
                input message: 'Approve deployment to PRODUCTION?', ok: 'Deploy'
            }
        }

        stage('Deploy') {
            steps {
                echo "üöÄ Deploying ${env.APP_ENV} .jar"
                dir('springboot-crud-h2/target') {
                    // Replace this with your actual deployment command
                    bat "copy springboot-crud-h2-1.0.0.jar C:\\Deployments\\${env.APP_ENV}\\"
                }
            }
        }

        stage('Monitor Logs') {
            steps {
                echo "üìÑ Monitoring logs for ${env.APP_ENV}"
                // Example: tail the last 50 lines of the log (Windows PowerShell)
                bat "powershell -Command \"Get-Content C:\\Deployments\\${env.APP_ENV}\\springboot-crud-h2.log -Tail 50\""
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline finished successfully!"
        }
        failure {
            echo "‚ùå Pipeline failed! Check logs above."
        }
    }
}
